const allIcons = [
  'üçé',
  'üçå',
  'üçí',
  'üçá',
  'üçâ',
  'üçç',
  'üçë',
  'üçì',
  'ü•ï',
  'ü•¶',
  'ü•î',
  'üçÖ',
  'üåΩ',
  'ü•ë',
  'üçÜ',
  'üçî',
  'üçü',
  'üçï',
  'üå≠',
  'üçù',
  'üçú',
  'üç≤',
  'üçõ',
  'üç£',
  'üç§',
  'üç•',
  'üç¶',
  'üçß',
  'üç®',
  'üç©',
]

const getCardSize = (cols: number) => (cols === 4 ? 120 : 85)
const getRowsSize = (cols: number) => (cols === 4 ? 4 : 6)

export const cols = 4 // 4 | 6 | 10
export const rows = getRowsSize(cols)

enum CardsCount {
  S = 16,
  M = 36,
  L = 60,
}

const iconsCount: Record<CardsCount, number> = {
  [CardsCount.S]: 8,
  [CardsCount.M]: 18,
  [CardsCount.L]: 30,
}

export const iconSize = {
  4: 70,
  6: 50,
}

export const getGameConfig = (gameCols: number) => {
  const rows = getRowsSize(gameCols)

  const computedGameConfig = {
    cols: gameCols,
    rows,
    cardSize: getCardSize(gameCols),
    canvasMargin: 100,
    cardMargin: 15,
    borderRadius: 10,
    timerSize: 50,
  }

  export const FPS = 60
  
  // –°—É–º–º–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∏–≥—Ä–µ
  const computedTotalGameCards = rows * gameCols

  // –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∏–∫–æ–Ω–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç gameConfig.cols * gameConfig.rows
  const computedIconsCount =
    computedTotalGameCards === 60
      ? allIcons
      : allIcons.slice(0, iconsCount[computedTotalGameCards as CardsCount])

  return {
    cols: gameCols,
    gameConfig: computedGameConfig,
    getIconsCount: computedIconsCount,
    iconSize,
    rows,
    totalGameCards: computedTotalGameCards,
    FPS,
  }
}
