import React, { useEffect, useRef, useState } from 'react'
import s from './Game.module.scss'
import Button from '@/components/Button/Button'
import { useNavigate } from 'react-router-dom'
import { AppPath } from '@/types/AppPath'


interface Coordinates {
  x: number
  y: number
}

interface Card {
  position: Coordinates
  color: Colors
  emoji: string
  isOpen: boolean
  isMatched: boolean
}

enum Colors {
  bg = '#23272F',
  closed = '#556075',
  opened = '#35495E',
  green = '#048100',
  red = '#930000',
}

const config = {
  gameSize: 4, // –ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤ –∏ –∫–æ–ª–æ–Ω–æ–∫
  boxSize: 120, // –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫
  spacing: 15, // –û—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
  borderRadius: 10, // –°–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤
}

// –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç config.gameSize
const emojiCounts: { [key: number]: number } = {
  4: 8,
  6: 18,
}
const allEmojis = [
  'üçé',
  'üçå',
  'üçí',
  'üçá',
  'üçâ',
  'üçç',
  'üçë',
  'üçì',
  'ü•ï',
  'ü•¶',
  'ü•î',
  'üçÖ',
  'üåΩ',
  'ü•ë',
  'üçÜ',
  'üçî',
  'üçü',
  'üçï',
  'üå≠',
  'üçù',
  'üçú',
  'üç≤',
  'üçõ',
  'üç£',
  'üç§',
  'üç•',
  'üç¶',
  'üçß',
  'üç®',
  'üç©',
  'üç™',
  'üç∞',
]
const emojis =
  config.gameSize === 8
    ? allEmojis
    : allEmojis.slice(0, emojiCounts[config.gameSize])

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
const drawCard = (
  ctx: CanvasRenderingContext2D,
  { x, y }: Coordinates,
  color: Colors,
  scale = 1,
  width = config.boxSize,
  height = config.boxSize
) => {
  ctx.save()
  ctx.translate(x + width / 2, y + height / 2)
  ctx.scale(scale, 1) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± —Ç–æ–ª—å–∫–æ –ø–æ X

  ctx.fillStyle = color
  ctx.beginPath()
  ctx.roundRect(-width / 2, -height / 2, width, height, config.borderRadius)
  ctx.fill()

  ctx.restore()
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
const drawEmoji = (
  ctx: CanvasRenderingContext2D,
  { x, y }: Coordinates,
  emoji: string,
  scaleX: number,
  scaleY = 1
) => {
  const xCenter = 0
  const yCenter = 0

  ctx.save()
  ctx.translate(x + config.boxSize / 2, y + config.boxSize / 2)
  ctx.scale(scaleX, scaleY)

  ctx.font = `70px Arial`
  ctx.textAlign = 'center'
  ctx.textBaseline = 'middle'
  ctx.fillText(emoji, xCenter, yCenter)

  ctx.restore()
}

// –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
const drawRestartButton = (ctx: CanvasRenderingContext2D) => {
  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ. –ö–Ω–æ–ø–∫–∞ –ø–æ—Ç–æ–º –ø–µ—Ä–µ–µ–¥–µ—Ç –≤ —Å–∞–π–¥–±–∞—Ä.
  const x = 177.5
  const y = 250
  const width = 200
  const height = 50
  const xCenter = x + width / 2
  const yCenter = y + height / 2

  ctx.fillStyle = Colors.green

  // –†–∏—Å–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤
  ctx.beginPath()
  ctx.roundRect(x, y, width, height, config.borderRadius)
  ctx.fill()

  // –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
  ctx.fillStyle = '#ffffff'
  ctx.font = '15px Arial'

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  ctx.textBaseline = 'middle'
  ctx.textAlign = 'center'

  ctx.fillText('–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É', xCenter, yCenter)
}

const Game = () => {
  const navigate = useNavigate()
  const onMainClick = () => {
    navigate(AppPath.MAIN)
  }
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [cards, setCards] = useState<Card[]>([])
  const [openCards, setOpenCards] = useState<number[]>([])
  const [matchedPairs, setMatchedPairs] = useState(0)
  const [initialDisplay, setInitialDisplay] = useState(true)
  let scale = 0.1

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω–∏—Ü–∏–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã
  const initializeGame = () => {
    const canvas = canvasRef.current
    if (!canvas) return

    const ctx = canvas.getContext('2d')
    if (!ctx) return

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ canvas
    const boardWidth =
      (config.boxSize + config.spacing) * config.gameSize + config.spacing
    const boardHeight =
      (config.boxSize + config.spacing) * config.gameSize + config.spacing

    canvas.width = boardWidth
    canvas.height = boardHeight

    canvas.style.background = Colors.bg

    const allEmojis = [...emojis, ...emojis].sort(() => Math.random() - 0.5)
    const cards: Card[] = []

    allEmojis.forEach((emoji, index) => {
      const row = Math.floor(index / config.gameSize)
      const col = index % config.gameSize

      const x = col * (config.boxSize + config.spacing) + config.spacing
      const y = row * (config.boxSize + config.spacing) + config.spacing

      const card = {
        position: { x, y },
        color: Colors.opened,
        emoji: emoji,
        isOpen: true,
        isMatched: false,
      }

      drawCard(ctx, card.position, card.color)
      drawEmoji(ctx, card.position, emoji, 1)

      cards.push(card)
    })

    setCards(cards)
  }

  // –ò–Ω–∏—Ü–∏–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  useEffect(() => {
    initializeGame()
  }, [])

  // –õ–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
  useEffect(() => {
    if (initialDisplay) {
      setTimeout(() => {
        const canvas = canvasRef.current
        const ctx = canvas?.getContext('2d')

        if (ctx) {
          cards.forEach(card => {
            drawCard(ctx, card.position, Colors.closed)
          })
        }

        setCards(prevCards => {
          return prevCards.map(card => ({
            ...card,
            isOpen: false,
          }))
        })

        setInitialDisplay(false) // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      }, 2000)
    }
  }, [initialDisplay, cards])

  // –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä
  useEffect(() => {
    if (openCards.length === 2) {
      const [firstIndex, secondIndex] = openCards
      const firstCard = cards[firstIndex]
      const secondCard = cards[secondIndex]

      if (firstCard.emoji === secondCard.emoji) {
        setMatchedPairs(matchedPairs + 1)
        setCards(prevCards => {
          const newCards = [...prevCards]
          newCards[firstIndex].isMatched = true
          newCards[secondIndex].isMatched = true
          return newCards
        })
      } else {
        const canvas = canvasRef.current
        const ctx = canvas?.getContext('2d')
        if (ctx) {
          drawCard(ctx, firstCard.position, Colors.closed)
          drawCard(ctx, secondCard.position, Colors.closed)
        }
        setCards(prevCards => {
          const newCards = [...prevCards]
          newCards[firstIndex].isOpen = false
          newCards[secondIndex].isOpen = false
          return newCards
        })
      }
      setOpenCards([])
    }
  }, [openCards])

  // –õ–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –ø–æ–±–µ–¥–æ–π –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
  useEffect(() => {
    if (matchedPairs === emojis.length) {
      alert('–ü–û–ë–ï–î–ê!')
      const canvas = canvasRef.current
      const ctx = canvas?.getContext('2d')
      if (ctx) {
        drawRestartButton(ctx)
      }
    }
  }, [matchedPairs])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ canvas
  const handleMouseDown = (event: React.MouseEvent<HTMLCanvasElement>) => {
    const canvas = canvasRef.current
    const ctx = canvas?.getContext('2d')
    if (!canvas || !ctx) return

    const rect = canvas.getBoundingClientRect()
    const mouseX = event.clientX - rect.left
    const mouseY = event.clientY - rect.top

    cards.forEach((card, index) => {
      const { x, y } = card.position

      if (
        mouseX >= x &&
        mouseX <= x + config.boxSize &&
        mouseY >= y &&
        mouseY <= y + config.boxSize
      ) {
        if (card.isMatched || card.isOpen) return

        const animationFrame = () => {
          drawCard(ctx, card.position, Colors.opened, scale)
          drawEmoji(ctx, card.position, card.emoji, scale)

          scale += 0.075

          if (scale <= 1) {
            requestAnimationFrame(animationFrame)
          } else {
            setOpenCards(prevOpenCards => [...prevOpenCards, index])
            setCards(prevCards => {
              const newCards = [...prevCards]
              newCards[index].isOpen = true
              return newCards
            })
          }
        }
        animationFrame()
      }
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "Restart"
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ. –ö–Ω–æ–ø–∫–∞ –ø–æ—Ç–æ–º –ø–µ—Ä–µ–µ–¥–µ—Ç –≤ —Å–∞–π–¥–±–∞—Ä.
    const restartX = 177.5
    const restartY = 250
    const restartWidth = 200
    const restartHeight = 50

    if (
      mouseX >= restartX &&
      mouseX <= restartX + restartWidth &&
      mouseY >= restartY &&
      mouseY <= restartY + restartHeight &&
      matchedPairs === emojis.length
    ) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
      setCards([])
      setOpenCards([])
      setMatchedPairs(0)
      setInitialDisplay(true)

      // –ó–∞–Ω–æ–≤–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É
      initializeGame()
    }
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞–¥ canvas
  const handleMouseMove = (event: React.MouseEvent<HTMLCanvasElement>) => {
    const canvas = canvasRef.current
    if (!canvas) return

    const rect = canvas.getBoundingClientRect()
    const mouseX = event.clientX - rect.left
    const mouseY = event.clientY - rect.top

    const isOverBox = cards.some(card => {
      const { x, y } = card.position
      return (
        mouseX >= x &&
        mouseX <= x + config.boxSize &&
        mouseY >= y &&
        mouseY <= y + config.boxSize &&
        matchedPairs !== emojis.length &&
        !initialDisplay
      )
    })

    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ. –ö–Ω–æ–ø–∫–∞ –ø–æ—Ç–æ–º –ø–µ—Ä–µ–µ–¥–µ—Ç –≤ —Å–∞–π–¥–±–∞—Ä.
    const restartButtonX = 177.5
    const restartButtonY = 250
    const restartButtonWidth = 200
    const restartButtonHeight = 50

    const isOverRestartButton =
      mouseX >= restartButtonX &&
      mouseX <= restartButtonX + restartButtonWidth &&
      mouseY >= restartButtonY &&
      mouseY <= restartButtonY + restartButtonHeight

    if (isOverBox || (isOverRestartButton && matchedPairs === emojis.length)) {
      canvas.style.cursor = 'pointer'
    } else {
      canvas.style.cursor = 'default'
    }
  }

  return (
    <main className={s.wrapper}>
      <div className={s.field}>
        <canvas ref={canvasRef} />
      </div>
      <div className={s.handlers}>
        <ul className={s.options}>
          <li className={s.option}>
            <span className={s.optionName}>–¢–∞–π–º–µ—Ä</span>
            <span className={s.optionValue}>01:00</span>
          </li>
          <li className={s.option}>
            <span className={s.optionName}>–û—Ç–≥–∞–¥–∞–Ω–æ</span>
            <span className={s.optionValue}>0 –∏–∑ 16</span>
          </li>
          <li className={s.option}>
            <span className={s.optionName}>–û—á–∫–∏</span>
            <span className={s.optionValue}>0</span>
          </li>
        </ul>
        <div className={s.buttons}>
          <Button className={s.button}>–ü–æ–µ—Ö–∞–ª–∏!</Button>
          <Button theme="dark" className={s.button} onClick={onMainClick}>
            –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </Button>
        </div>
      </div>
    </main>
  )
}

export default Game
